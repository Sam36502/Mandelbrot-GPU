#version 450


layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0, rgba32f) uniform image2D tex;

layout(location = 0) uniform uvec3 view_window;
layout(location = 1) uniform uint iterations;


//	Transform screen space coordinates into a complex number
//	including translation & zoom from the view window
//	
uvec2 complex_from_coords(vec2 coords);

//	Takes a set of coordinates and turns it into colours
//	based on its position around the origin
//	
vec4 visualise_coords(vec2 coords);

//	Squares a complex number
//	
uvec2 complex_square(uvec2 c);

//	Calculates the distance a complex number is from 0,0
//	
uint dist_from_origin(uvec2 c);

//	Fetches the colour from a spectrum for a given iteration level
//	
vec4 iter_colour(float iter_lvl);

void main() {

	uvec2 coords = uvec2(gl_WorkGroupID.xy);
	uvec2 Z = complex_from_coords(coords);
	uvec2 C = Z;


	// Perform mandelbrot iterations;
	vec4 clr = vec4(0.0, 0.0, 0.0, 1.0);
	for (int i=0; i<iterations; i++) {
		Z = complex_square(Z) + C;

		if (dist_from_origin(Z) > (2<<30)) {
			clr = iter_colour(float(i) / float(iterations));
			break;
		}
	}

	imageStore(tex, ivec2(gl_WorkGroupID.xy), clr);
}

uvec2 complex_from_coords(vec2 coords) {
	uvec2 c = uvec2(coords - vec2(gl_NumWorkGroups) / 2);
	c.x = c.x / view_window.z + view_window.x;
	c.y = c.y / view_window.z + view_window.y;
	return c;
}

vec4 visualise_coords(vec2 coords) {
	vec2 Z = complex_from_coords(coords);

	vec4 clr = vec4(0.0, 0.0, 0.0, 1.0);
	if (Z.x > 0.0) clr.r += Z.x;
	else clr.gb -= Z.x;
	if (Z.y > 0.0) clr.g += Z.y;
	else clr.rb -= Z.y;

	return clr;
}

uvec2 complex_square(uvec2 c) {
	uint x = ((c.x * c.x) >> 30) - ((c.y * c.y) >> 30);
	uint y = 2 * ((c.x * c.y) >> 30);
	return uvec2(x, y);
}

uint dist_from_origin(uvec2 c) {
	return uint(sqrt(((c.x * c.x)>>30) + ((c.y * c.y)>>30)));
}

vec4 iter_colour(float iter_lvl) {
	// Greyscale
	//return vec4(iter_lvl, iter_lvl, iter_lvl, 1.0);

	float red = iter_lvl;
	float green = abs(iter_lvl - 0.5);
	float blue = (-iter_lvl) + 1.0;

	return vec4(red, green, blue, 1.0);
}